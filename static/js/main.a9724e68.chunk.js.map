{"version":3,"sources":["components/Home.js","components/Algorithms.js","components/Sort.js","assets/profile.png","components/Navigation.js","index.js"],"names":["Home","state","displayBio","displayScores","toggleBio","setState","toggleScores","Component","mergeSort","array","anim","l","r","mid","Math","floor","lft","rit","i","push","Number","MAX_SAFE_INTEGER","x","y","leftAnim","length","rightAnim","bubbleSort","j","randomInt","min","max","random","Sort","btnActive","showModal","animDelay","timeouts","hideModal","resetArray","playAnimations","temp","slice","arrayBars","document","getElementsByClassName","a","b","setTimeout","style","backgroundColor","height","timeout","sortingAlgorithms","quickSort","heapSort","this","clearTimeout","Modal","show","size","aria-labelledby","centered","Body","Footer","Button","onClick","className","map","value","idx","variant","disabled","Navigation","props","activeKey","Navbar","bg","Brand","href","src","profile","minHeight","maxHeight","marginBottom","alt","Nav","Link","ReactDOM","render","basename","exact","path","getElementById"],"mappings":"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","file":"static/js/main.a9724e68.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//this is where everything should be to get rendered in index.html\r\nclass Home extends Component {\r\n\r\n    //update state on initialization\r\n    state = { displayBio : false, displayScores : false };\r\n\r\n    //use setState to change state, don't directly modify state\r\n    //it calls render() again at the end of setState\r\n    toggleBio = () => {\r\n        this.setState({ displayBio : !this.state.displayBio });\r\n    }\r\n\r\n    toggleScores = () => {\r\n        this.setState({ displayScores : !this.state.displayScores });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Algorithms Visualizer</h2>\r\n                <p>This is a project I made to visualize various algorithms in computer science.</p>\r\n                <hr/>\r\n                <h4>Sort</h4>\r\n                <p>Simulates various sorting algorithms on an array. Includes merge sort, heap sort, bubble sort, and quick sort.</p>\r\n                <hr/>\r\n                <h4>Graph</h4>\r\n                <p>Simulates graph theory algorithms on a grid of nodes.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","//merge sort function\r\nexport function mergeSort(array, anim, l, r) {\r\n    //base case: the segment is length 1\r\n    if(l == r) return;\r\n    var mid = Math.floor((l+r)/2);\r\n    //otherwise, sort the left and right segments\r\n    mergeSort(array, anim, l, mid); mergeSort(array, anim, mid+1, r);\r\n    //combine sorted segments\r\n    const lft = [], rit = []; \r\n    for (let i = l; i <= mid; i++) lft.push(array[i]); lft.push(Number.MAX_SAFE_INTEGER);\r\n    for (let i = mid + 1; i <= r; i++) rit.push(array[i]); rit.push(Number.MAX_SAFE_INTEGER);\r\n    for (let i = l, x=0, y=0; i <= r; i++)\r\n    {\r\n        //push animations for updating the left and right bar colour, if they exist\r\n        var leftAnim = x == lft.length-1 ? -1 : l+x;\r\n        var rightAnim = y == rit.length-1 ? -1 : mid+1+y;\r\n        anim.push([leftAnim, rightAnim, 1]); \r\n        //update the pointer element's height\r\n        if (lft[x] <= rit[y]) \r\n        {\r\n            anim.push([i, lft[x], 2]);\r\n            array[i] = lft[x++];\r\n        }\r\n        else \r\n        {\r\n            anim.push([i, rit[y], 2]);\r\n            array[i] = rit[y++];\r\n        }\r\n        anim.push([leftAnim, rightAnim, 0]);\r\n    }\r\n}\r\n\r\n//bubble sort function\r\nexport function bubbleSort(array, anim, l, r) {\r\n    //moves the largest element to the top during each sweep of the algorithm\r\n    for(var i = array.length-1; i > 0; i--)\r\n    {\r\n        for(var j = 0; j < i; j++)\r\n        {\r\n            //updates colour of this element and the one next to it\r\n            anim.push([j, j+1, 1]);\r\n            if(array[j] > array[j+1])\r\n            {\r\n                var x = array[j]; array[j] = array[j+1]; array[j+1] = x;\r\n                //swap two values\r\n                anim.push([j, j+1, 3]);\r\n            }\r\n            //reset the colours\r\n            anim.push([j, j+1, 0]);\r\n        }\r\n    }\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport * as sortingAlgorithms from \"./Algorithms\";\r\n\r\nclass Sort extends Component {\r\n\r\n    state = { array: [], anim: [], btnActive: true, showModal: true }\r\n    animDelay = 4;\r\n    timeouts = [];\r\n\r\n    componentDidMount() {\r\n        this.resetArray(); \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        for(var i = 0; i < this.timeouts.length; i++)\r\n        {\r\n            clearTimeout(this.timeouts[i]);\r\n        }\r\n    }\r\n\r\n    hideModal = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    //initialize array to random values\r\n    resetArray = () => {\r\n        const n = 180;\r\n        const array = [];\r\n        for(let i = 0; i < n; i++)\r\n        {\r\n            array.push(randomInt(100, 600));\r\n        }\r\n        this.setState({array: array});\r\n    }\r\n\r\n    playAnimations = () => \r\n    {\r\n        //these algorithms do the sorting on a copy of the official array, then push all of the modification data to the animation array\r\n        //the animation array is read here and changes are reflected in this temp array\r\n        //finally, the temp array is set to the official array\r\n        const temp = this.state.array.slice();\r\n        for(let i = 0; i < this.state.anim.length; i++)\r\n        {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const [a, b, action] = this.state.anim[i];\r\n            //action: 0 = set bars to blue, 1 = set bars to red, 2 = update a single value, 3 = swap two values\r\n            switch(action)\r\n            {\r\n                case 0:\r\n                    this.timeouts.push(setTimeout(() => {\r\n                        if(a !== -1) arrayBars[a].style.backgroundColor = \"lightskyblue\"; \r\n                        if(b !== -1) arrayBars[b].style.backgroundColor = \"lightskyblue\"; \r\n                    }, i*this.animDelay));\r\n                break;\r\n                case 1:\r\n                    this.timeouts.push(setTimeout(() => {\r\n                        if(a !== -1) arrayBars[a].style.backgroundColor = \"crimson\"; \r\n                        if(b !== -1) arrayBars[b].style.backgroundColor = \"crimson\"; \r\n                    }, i*this.animDelay));\r\n                break;\r\n                case 2:\r\n                    this.timeouts.push(setTimeout(() => {\r\n                        temp[a] = b;\r\n                        arrayBars[a].style.height = `${b/15}vh`;\r\n                    }, i*this.animDelay));\r\n                break;\r\n                case 3:\r\n                    this.timeouts.push(setTimeout(() => {\r\n                        var x = temp[a]; temp[a] = temp[b]; temp[b] = x;\r\n                        arrayBars[a].style.height = `${temp[a]/15}vh`;\r\n                        arrayBars[b].style.height = `${temp[b]/15}vh`;\r\n                    }, i*this.animDelay));\r\n                break;\r\n            }\r\n        }\r\n        this.timeouts.push(this.timeout = setTimeout(() => {\r\n            this.setState({btnActive: true, array: temp});\r\n        }, this.state.anim.length*this.animDelay));\r\n        \r\n    }\r\n\r\n    bubbleSort = () => {\r\n        this.setState({anim: [], btnActive: false});\r\n        sortingAlgorithms.bubbleSort(this.state.array.slice(), this.state.anim, 0, this.state.array.length-1);\r\n        this.playAnimations();\r\n    }\r\n\r\n    mergeSort = () => {\r\n        this.setState({anim: [], btnActive: false});\r\n        sortingAlgorithms.mergeSort(this.state.array.slice(), this.state.anim, 0, this.state.array.length-1);\r\n        this.playAnimations();\r\n    }   \r\n\r\n    quickSort = () => {\r\n        \r\n    }\r\n\r\n    heapSort = () => {\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n        return (\r\n            <div>\r\n                <Modal show={this.state.showModal}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                >\r\n                    <Modal.Body>\r\n                    <h4>Sorting Visualizer</h4>\r\n                    <p>This app visualizes sorting algorithms on an array. Here are the algorithms it supports:</p>\r\n                    <hr/>\r\n                    <h5>Bubble Sort</h5>\r\n                    <p>A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements \r\n                        and swaps them if they are in the wrong order.</p>\r\n                    <hr/>\r\n                    <h5>Merge Sort</h5>\r\n                    <p>A divide and conquer sorting algorithm that merges two sorted arrays in O(n) time.</p>\r\n                    <hr/>\r\n                    <h5>Heap Sort</h5>\r\n                    <p>A comparison-based sorting algorithm that reduces unsorted regions by extracting the largest element from it and \r\n                        inserting it into the sorted regions.</p>\r\n                    <hr/>\r\n                    <h5>Quick Sort</h5>\r\n                    <p>A divide and conquer sorting algorithm that uses a pivot to sorts subarrays recursively.</p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button onClick={this.hideModal}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <div className=\"array-bar-fake\" style={{ height: `${650/15}vh` }}></div>\r\n                {array.map((value, idx) => (\r\n                    <div className=\"array-bar\" key={idx} style={{ height: `${value/15}vh` }}></div>\r\n                ))}\r\n                <div className=\"array-bar-fake\" style={{ height: `${650/15}vh` }}></div>\r\n                <hr/>\r\n                <Button variant=\"success\" disabled={!this.state.btnActive} onClick={this.resetArray}>New Array</Button>\r\n                <Button variant=\"primary\" disabled={!this.state.btnActive} onClick={this.bubbleSort}>Bubble Sort</Button>\r\n                <Button variant=\"info\" disabled={!this.state.btnActive} onClick={this.mergeSort}>Merge Sort</Button>\r\n                <Button variant=\"secondary\" disabled={!this.state.btnActive} onClick={this.quickSort}>Quick Sort</Button>\r\n                <Button variant=\"dark\" disabled={!this.state.btnActive} onClick={this.heapSort}>Heap Sort</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//random int in the range [min, max]\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max-min+1) + min);\r\n}\r\n\r\nexport default Sort;","export default __webpack_public_path__ + \"static/media/profile.aec772f7.png\";","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport profile from \"../assets/profile.png\";\r\n\r\nconst Navigation = props => {\r\n    //component is passed down thru props and navigation will now apply the navbar on top of the component\r\n    const { Component, activeKey } = props;\r\n\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#/\">\r\n                    <img src={profile} style={{ height: 35, minHeight: 35, maxHeight: 35,  marginBottom: 0 }} alt=\"Profile\" className=\"profile\"/>\r\n                </Navbar.Brand>\r\n                <Nav activeKey={activeKey} className=\"mr-auto\">\r\n                    <Nav.Link href=\"#/\">Home</Nav.Link>\r\n                    <Nav.Link href=\"#/sort\">Sort</Nav.Link>\r\n                </Nav>\r\n            </Navbar>\r\n            <Component/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Home from \"./components/Home\";\nimport Sort from \"./components/Sort\";\nimport Navigation from \"./components/Navigation\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport \"./index.css\";\n\n//render everything in App as html code in the body of index.html\nReactDOM.render(\n    <HashRouter basename=\"/\">\n        <Route exact path=\"/\" render={() => <Navigation Component={Home} activeKey=\"#/\"/>}/>\n        <Route path=\"/sort\" render={() => <Navigation Component={Sort} activeKey=\"#/sort\"/>}/>\n    </HashRouter>, \n    document.getElementById(\"root\")\n);"],"sourceRoot":""}