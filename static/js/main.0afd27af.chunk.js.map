{"version":3,"sources":["components/Home.js","components/Algorithms.js","components/Sort.js","assets/icon.png","components/Navigation.js","index.js"],"names":["Home","state","displayBio","displayScores","toggleBio","setState","toggleScores","Component","mergeSort","array","anim","l","r","dec","focus","push","mid","Math","floor","lft","rit","i","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","x","y","leftAnim","length","rightAnim","bubbleSort","j","randomInt","min","max","random","Sort","timeouts","decreasing","showMergeFocus","endMargin","maxArraySize","btnActive","showModal","arraySize","animDelay","arrayWidth","window","innerWidth","arrayMargin","updWidth","hideModal","resetArray","playAnimations","arrayBars","document","getElementsByClassName","a","b","setTimeout","style","backgroundColor","height","opacity","timeout","sortingAlgorithms","slice","quickSort","stopAlgorithm","clearTimeout","changedSize","event","target","value","changedDecreasing","checked","changedshowMergeFocus","changedDelay","this","addEventListener","removeEventListener","Modal","onHide","show","size","aria-labelledby","centered","Body","Footer","Button","onClick","className","map","idx","width","margin","display","variant","disabled","Form","Check","inline","type","label","onChange","OverlayTrigger","placement","delay","hide","overlay","Tooltip","Group","controlId","Label","Control","defaultValue","tooltip","Navigation","props","activeKey","Navbar","bg","Brand","href","src","icon","alt","Nav","Link","ReactDOM","render","basename","exact","path","getElementById"],"mappings":"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","file":"static/js/main.0afd27af.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//this is where everything should be to get rendered in index.html\r\nclass Home extends Component {\r\n\r\n    //update state on initialization\r\n    state = { displayBio : false, displayScores : false };\r\n\r\n    //use setState to change state, don't directly modify state\r\n    //it calls render() again at the end of setState\r\n    toggleBio = () => {\r\n        this.setState({ displayBio : !this.state.displayBio });\r\n    }\r\n\r\n    toggleScores = () => {\r\n        this.setState({ displayScores : !this.state.displayScores });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Algorithms Visualizer</h2>\r\n                <p>This is a project I made to visualize various algorithms in computer science.</p>\r\n                <hr/>\r\n                <h4>Sort</h4>\r\n                <p>Simulates various sorting algorithms on an array. Includes merge sort, heap sort, bubble sort, and quick sort.</p>\r\n                <hr/>\r\n                <h4>Graph</h4>\r\n                <p>Simulates graph theory algorithms on a grid of nodes.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","//merge sort function\r\nexport function mergeSort(array, anim, l, r, dec, focus) {\r\n    //update focus of mergesort\r\n    if(focus) anim.push([l, r, 4]);\r\n    //base case: the segment is length 1\r\n    if(l === r) return;\r\n    var mid = Math.floor((l+r)/2);\r\n    //otherwise, sort the left and right segments\r\n    mergeSort(array, anim, l, mid, dec, focus); mergeSort(array, anim, mid+1, r, dec, focus);\r\n    //update focus of mergesort\r\n    if(focus) anim.push([l, r, 4]);\r\n    //combine sorted segments\r\n    const lft = [], rit = []; \r\n    \r\n    for (let i = l; i <= mid; i++) lft.push(array[i]); \r\n    lft.push(dec ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);\r\n\r\n    for (let i = mid + 1; i <= r; i++) rit.push(array[i]); \r\n    rit.push(dec ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);\r\n\r\n    for (let i = l, x=0, y=0; i <= r; i++)\r\n    {\r\n        //push animations for updating the left and right bar colour, if they exist\r\n        var leftAnim = x === lft.length-1 ? -1 : l+x;\r\n        var rightAnim = y === rit.length-1 ? -1 : mid+1+y;\r\n        anim.push([leftAnim, rightAnim, 1]); \r\n        if(focus) anim.push([i, i, 5]);\r\n        //update the pointer element's height\r\n        if(dec)\r\n        {\r\n            if (lft[x] >= rit[y]) \r\n            {\r\n                anim.push([i, lft[x], 2]);\r\n                array[i] = lft[x++];\r\n            }\r\n            else \r\n            {\r\n                anim.push([i, rit[y], 2]);\r\n                array[i] = rit[y++];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (lft[x] <= rit[y]) \r\n            {\r\n                anim.push([i, lft[x], 2]);\r\n                array[i] = lft[x++];\r\n            }\r\n            else \r\n            {\r\n                anim.push([i, rit[y], 2]);\r\n                array[i] = rit[y++];\r\n            }\r\n        }\r\n        anim.push([leftAnim, rightAnim, 0]);\r\n        anim.push([i, i, 0]);\r\n    }\r\n}\r\n\r\n//bubble sort function\r\nexport function bubbleSort(array, anim, dec) {\r\n    //moves the largest element to the top during each sweep of the algorithm\r\n    for(var i = array.length-1; i > 0; i--)\r\n    {\r\n        for(var j = 0; j < i; j++)\r\n        {\r\n            //updates colour of this element and the one next to it\r\n            anim.push([j, j+1, 1]);\r\n            if(dec)\r\n            {\r\n                if(array[j] < array[j+1])\r\n                {\r\n                    let x = array[j]; array[j] = array[j+1]; array[j+1] = x;\r\n                    //swap two values\r\n                    anim.push([j, j+1, 3]);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if(array[j] > array[j+1])\r\n                {\r\n                    let x = array[j]; array[j] = array[j+1]; array[j+1] = x;\r\n                    //swap two values\r\n                    anim.push([j, j+1, 3]);\r\n                }\r\n            }\r\n            //reset the colours\r\n            anim.push([j, j+1, 0]);\r\n        }\r\n    }\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport {Button, Modal, Form, OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\nimport * as sortingAlgorithms from \"./Algorithms\";\r\n\r\nclass Sort extends Component {\r\n\r\n    timeouts = [];\r\n    decreasing = false;\r\n    showMergeFocus = false;\r\n    endMargin = 40;\r\n    maxArraySize = 200;\r\n\r\n    state = { array: [], anim: [], btnActive: true, showModal: true, arraySize: this.maxArraySize, animDelay: 3, \r\n        arrayWidth: (window.innerWidth-this.endMargin*2)/(this.maxArraySize*2), \r\n        arrayMargin: (window.innerWidth-this.endMargin*2)/(this.maxArraySize*4) }\r\n\r\n    componentDidMount() {\r\n        this.resetArray(); \r\n        window.addEventListener('resize', this.updWidth);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        for(var i = 0; i < this.timeouts.length; i++)\r\n        {\r\n            clearTimeout(this.timeouts[i]);\r\n        }\r\n        window.removeEventListener('resize', this.updWidth);\r\n    }\r\n\r\n    updWidth = () => {\r\n        this.setState({ arrayWidth: (window.innerWidth-this.endMargin*2)/(this.maxArraySize*2), arrayMargin: (window.innerWidth-this.endMargin*2)/(this.maxArraySize*4) });\r\n    }\r\n\r\n    hideModal = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    //initialize array to random values\r\n    resetArray = () => {\r\n        const array = [];\r\n        for(let i = 0; i < this.state.arraySize; i++)\r\n        {\r\n            array.push(randomInt(100, 500));\r\n        }\r\n        this.setState({array: array});\r\n    }\r\n\r\n    playAnimations = () => \r\n    {\r\n        //these algorithms do the sorting on a copy of the official array, then push all of the modification data to the animation array\r\n        //the animation array is read here and changes are made to the original array\r\n        for(let i = 0; i < this.state.anim.length; i++)\r\n        {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const [a, b, action] = this.state.anim[i];\r\n            //action: 0 = set bars to blue, 1 = set bars to red, 2 = update a single value, 3 = swap two values\r\n            switch(action)\r\n            {\r\n                case 0: //unselect two bars\r\n                    this.timeouts.push(setTimeout(() => {\r\n                        if(a !== -1) arrayBars[a].style.backgroundColor = \"lightskyblue\"; \r\n                        if(b !== -1) arrayBars[b].style.backgroundColor = \"lightskyblue\"; \r\n                    }, i*this.state.animDelay));\r\n                break;\r\n                case 1: //select two bars\r\n                    this.timeouts.push(setTimeout(() => {\r\n                        if(a !== -1) arrayBars[a].style.backgroundColor = \"crimson\"; \r\n                        if(b !== -1) arrayBars[b].style.backgroundColor = \"crimson\"; \r\n                    }, i*this.state.animDelay));\r\n                break;\r\n                case 2: //update height of one bar\r\n                    this.timeouts.push(setTimeout(() => {\r\n                        this.state.array[a] = b;\r\n                        arrayBars[a].style.height = `${b/10}vh`;\r\n                    }, i*this.state.animDelay));\r\n                break;\r\n                case 3: //swap heights of two bars\r\n                    this.timeouts.push(setTimeout(() => {\r\n                        var x = this.state.array[a]; this.state.array[a] = this.state.array[b]; this.state.array[b] = x;\r\n                        arrayBars[a].style.height = `${this.state.array[a]/10}vh`;\r\n                        arrayBars[b].style.height = `${this.state.array[b]/10}vh`;\r\n                    }, i*this.state.animDelay));\r\n                break;\r\n                case 4: //update the segment which the merge sort algorithm is working on\r\n                this.timeouts.push(setTimeout(() => {\r\n                    for(let i = 0; i < arrayBars.length; i++)\r\n                    {\r\n                        if(a <= i && i <= b) arrayBars[i].style.opacity = `100%`;\r\n                        else arrayBars[i].style.opacity = `30%`;\r\n                    }\r\n                }, i*this.state.animDelay));\r\n                break;\r\n                case 5: //update a bar to lightgreen\r\n                    this.timeouts.push(setTimeout(() => {\r\n                        arrayBars[a].style.backgroundColor = \"lime\"; \r\n                    }, i*this.state.animDelay));\r\n                break;\r\n                default:\r\n                break;\r\n            }\r\n        }\r\n        this.timeouts.push(this.timeout = setTimeout(() => {\r\n            this.setState({btnActive: true});\r\n        }, this.state.anim.length*this.state.animDelay));\r\n        \r\n    }\r\n\r\n    bubbleSort = () => {\r\n        this.setState({anim: [], btnActive: false});\r\n        sortingAlgorithms.bubbleSort(this.state.array.slice(), this.state.anim, this.decreasing);\r\n        this.playAnimations();\r\n    }\r\n\r\n    mergeSort = () => {\r\n        this.setState({anim: [], btnActive: false});\r\n        sortingAlgorithms.mergeSort(this.state.array.slice(), this.state.anim, 0, this.state.array.length-1, this.decreasing, this.showMergeFocus);\r\n        this.playAnimations();\r\n    }   \r\n\r\n    quickSort = () => {\r\n        \r\n    }\r\n\r\n    stopAlgorithm = () => {\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        for(let i = 0; i < arrayBars.length; i++) \r\n        {\r\n            arrayBars[i].style.backgroundColor = \"lightskyblue\"; \r\n            arrayBars[i].style.opacity = `100%`;\r\n        }\r\n        for(let i = 0; i < this.timeouts.length; i++)\r\n        {\r\n            clearTimeout(this.timeouts[i]);\r\n        }\r\n        this.setState({btnActive: true});\r\n    }\r\n\r\n    //event for changing the size of the array\r\n    changedSize = (event) => {\r\n        this.setState({arraySize: event.target.value});\r\n    }\r\n\r\n    changedDecreasing = (event) => {\r\n        this.decreasing = event.target.checked;\r\n    }\r\n    \r\n    changedshowMergeFocus = (event) => {\r\n        this.showMergeFocus = event.target.checked;\r\n    }\r\n\r\n    //event for changing the animation delay\r\n    changedDelay = (event) => {\r\n        this.setState({animDelay: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n        return (\r\n            <div>\r\n                <Modal onHide={this.hideModal} show={this.state.showModal}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered>\r\n                    <Modal.Body>\r\n                    <h4>Sorting Visualizer</h4>\r\n                    <p>This app visualizes sorting algorithms on an array. Here are the algorithms it supports:</p>\r\n                    <hr/>\r\n                    <h5>Bubble Sort</h5>\r\n                    <p>A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements \r\n                        and swaps them if they are in the wrong order.</p>\r\n                    <hr/>\r\n                    <h5>Merge Sort</h5>\r\n                    <p>A divide and conquer sorting algorithm that uses O(n) merging of two sorted segments.</p>\r\n                    <hr/>\r\n                    <h5>Quick Sort</h5>\r\n                    <p>A divide and conquer sorting algorithm that uses a pivot to sort subarrays recursively.</p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button onClick={this.hideModal}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <div className=\"array-bar-fake\" style={{ height: `${500/10}vh` }}></div>\r\n                {array.map((value, idx) => (\r\n                    <div className=\"array-bar\" key={idx} style={{ height: `${value/10}vh`, width: this.state.arrayWidth, \r\n                    margin: `0px ${this.state.arrayMargin}px` }}></div>\r\n                ))}\r\n                <div className=\"array-bar-fake\" style={{ height: `${500/10}vh` }}></div>\r\n                <hr/>\r\n                <div style={{display: \"inline-block\"}}>\r\n                    <Button variant=\"success\" disabled={!this.state.btnActive} onClick={this.resetArray}>New Array</Button>\r\n                    <Button variant=\"primary\" disabled={!this.state.btnActive} onClick={this.bubbleSort}>Bubble Sort</Button>\r\n                    <Button variant=\"info\" disabled={!this.state.btnActive} onClick={this.mergeSort}>Merge Sort</Button>\r\n                    <Button variant=\"dark\" disabled={!this.state.btnActive} onClick={this.quickSort}>Quick Sort</Button>\r\n                    <Button variant=\"danger\" disabled={this.state.btnActive} onClick={this.stopAlgorithm}>Stop Algorithm</Button>\r\n\r\n                    <Form>\r\n                    <Form.Check \r\n                        inline\r\n                        type=\"checkbox\" \r\n                        label=\"Sort in decreasing order\"\r\n                        onChange={this.changedDecreasing}\r\n                        disabled={!this.state.btnActive}\r\n                    />\r\n                    <OverlayTrigger\r\n                        placement=\"right\"\r\n                        delay={{ show: 250, hide: 400 }}\r\n                        overlay={<Tooltip>\r\n                        Highlights the segment of the array processed by each recursive call of merge sort\r\n                        as well as the current element being adjusted.\r\n                      </Tooltip>}\r\n                    >\r\n                        <Form.Check \r\n                        inline\r\n                        type=\"checkbox\" \r\n                        label=\"Show focus of merge sort\"\r\n                        onChange={this.changedshowMergeFocus}\r\n                        disabled={!this.state.btnActive}\r\n                    />\r\n                    </OverlayTrigger>\r\n\r\n                    <Form.Group controlId=\"formBasicRange\">\r\n                        <Form.Label>Array Size: {this.state.arraySize}</Form.Label>\r\n                        <Form.Control disabled={!this.state.btnActive} type=\"range\" defaultValue={this.state.arraySize} \r\n                        min=\"10\" max={this.maxArraySize} tooltip=\"auto\" onChange = {(event) => this.changedSize(event)}/>\r\n                        <Form.Label>Animation Delay: {this.state.animDelay} ms</Form.Label>\r\n                        <Form.Control disabled={!this.state.btnActive} type=\"range\" defaultValue={this.state.animDelay} \r\n                        min=\"1\" max=\"200\" tooltip=\"auto\" onChange = {(event) => this.changedDelay(event)}/>\r\n                    </Form.Group>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//random int in the range [min, max]\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max-min+1) + min);\r\n}\r\nexport default Sort;","export default __webpack_public_path__ + \"static/media/icon.df8e9b2c.png\";","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport icon from \"../assets/icon.png\";\r\n\r\nconst Navigation = props => {\r\n    //component is passed down thru props and navigation will now apply the navbar on top of the component\r\n    const { Component, activeKey } = props;\r\n\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#/\">\r\n                    <img src={icon} alt=\"Icon\" className=\"icon\"/>\r\n                </Navbar.Brand>\r\n                <Nav activeKey={activeKey} className=\"mr-auto\">\r\n                    <Nav.Link href=\"#/\">Home</Nav.Link>\r\n                    <Nav.Link href=\"#/sort\">Sort</Nav.Link>\r\n                </Nav>\r\n            </Navbar>\r\n            <Component/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Home from \"./components/Home\";\r\nimport Sort from \"./components/Sort\";\r\nimport Navigation from \"./components/Navigation\";\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\n//render everything in App as html code in the body of index.html\r\nReactDOM.render(\r\n    <HashRouter basename=\"/\">\r\n        <Route exact path=\"/\" render={() => <Navigation Component={Home} activeKey=\"#/\"/>}/>\r\n        <Route path=\"/sort\" render={() => <Navigation Component={Sort} activeKey=\"#/sort\"/>}/>\r\n    </HashRouter>, \r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}