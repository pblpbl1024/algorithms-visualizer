{"version":3,"sources":["components/Home.js","components/Algorithms.js","components/Sort.js","assets/icon.png","components/Navigation.js","index.js"],"names":["Home","Component","mergeSort","a","anim","l","r","dec","focus","push","mid","Math","floor","lft","rit","i","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","x","y","left","length","right","quickSort","p","pivot","j","changed","partition","bubbleSort","randomInt","min","max","random","Sort","timeouts","decreasing","showMergeFocus","showQuickFocus","endMargin","maxArraySize","state","array","btnActive","showModal","arraySize","animDelay","arrayWidth","window","innerWidth","arrayMargin","updWidth","setState","hideModal","resetArray","playAnimations","arrayBars","document","getElementsByClassName","cmd","b","includes","setTimeout","style","backgroundColor","height","opacity","timeout","algos","slice","stopAlgorithm","clearTimeout","changedSize","event","target","value","changedDecreasing","checked","changedShowMergeFocus","changedShowQuickFocus","console","log","changedDelay","this","addEventListener","removeEventListener","Modal","onHide","show","size","aria-labelledby","centered","Body","Footer","Button","onClick","className","map","idx","width","margin","display","variant","disabled","Form","Check","inline","type","marginRight","marginBottom","label","onChange","OverlayTrigger","placement","delay","hide","overlay","Tooltip","Group","controlId","Label","Control","defaultValue","tooltip","Navigation","props","activeKey","Navbar","bg","Brand","as","Link","to","src","icon","alt","Nav","eventKey","ReactDOM","render","basename","process","exact","path","getElementById"],"mappings":"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","file":"static/js/main.990cf222.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//this is where everything should be to get rendered in index.html\r\nclass Home extends Component {\r\n\r\n    //update state on initialization\r\n    //state = { displayBio : false, displayScores : false };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Algorithms Visualizer</h2>\r\n                <p>This is a project I made to visualize various algorithms in computer science.</p>\r\n                <hr/>\r\n                <h4>Sort</h4>\r\n                <p>Simulates various sorting algorithms on an array. Includes merge sort, bubble sort, and quick sort.</p>\r\n                <hr/>\r\n                <h4>Graph</h4>\r\n                <p>Simulates graph theory algorithms on a grid of nodes.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","//merge sort function\r\nexport function mergeSort(a, anim, l, r, dec, focus) {\r\n    //update focus of mergesort on the entry to a subarray\r\n    if(focus) anim.push([\"focus\", l, r]);\r\n    //base case: the segment is length 1\r\n    if(l === r) return;\r\n    let mid = Math.floor((l+r)/2);\r\n    //otherwise, sort the left and right segments (as are always called by reference so all changes\r\n    //in the recursion are reflected in the original array that was passed in)\r\n    mergeSort(a, anim, l, mid, dec, focus); mergeSort(a, anim, mid+1, r, dec, focus);\r\n    //update focus of mergesort on the backtracking of recursion\r\n    if(focus) anim.push([\"focus\", l, r]);\r\n    //combine sorted segments\r\n    const lft = [], rit = [];\r\n    \r\n    for (let i = l; i <= mid; i++) lft.push(a[i]);\r\n    //add a buffer element so that when the end of the list is reached, the other one automatically finishes\r\n    lft.push(dec ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);\r\n\r\n    for (let i = mid + 1; i <= r; i++) rit.push(a[i]);\r\n    rit.push(dec ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);\r\n\r\n    for (let i = l, x=0, y=0; i <= r; i++)\r\n    {\r\n        //push animations for updating the left and right bar colour, if they exist\r\n        let left = x === lft.length-1 ? -1 : l+x;\r\n        let right = y === rit.length-1 ? -1 : mid+1+y;\r\n        anim.push([\"crimson\", left, right]);\r\n        //update the pointer element (green bar)\r\n        if(focus) anim.push([\"lime\", i, i]);\r\n        //update the pointer element's height\r\n        if(dec)\r\n        {\r\n            if (lft[x] >= rit[y]) \r\n            {\r\n                anim.push([\"update\", i, lft[x]]); a[i] = lft[x++];\r\n            }\r\n            else \r\n            {\r\n                anim.push([\"update\", i, rit[y]]); a[i] = rit[y++];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (lft[x] <= rit[y]) \r\n            {\r\n                anim.push([\"update\", i, lft[x]]); a[i] = lft[x++];\r\n            }\r\n            else \r\n            {\r\n                anim.push([\"update\", i, rit[y]]); a[i] = rit[y++];\r\n            }\r\n        }\r\n        anim.push([\"lightskyblue\", left, right]);\r\n        if(focus) anim.push([\"lightskyblue\", i, i]);\r\n    }\r\n}\r\n\r\n//quick sort function\r\nexport function quickSort(a, anim, l, r, dec, focus) {\r\n    if(l < r)\r\n    {\r\n        //update focus upon calling quickSort on a smaller subarray\r\n        if(focus) anim.push([\"focus\", l, r]);\r\n        //get the partition index from the quickSort function\r\n        let p = partition(a, anim, l, r, dec, focus);\r\n        //quicksort the two halves\r\n        quickSort(a, anim, l, p-1, dec, focus); quickSort(a, anim, p+1, r, dec, focus);\r\n        //update focus during the backtracking of recursion\r\n        if(focus) anim.push([\"focus\", l, r]);\r\n    }\r\n}\r\n\r\nfunction partition(a, anim, l, r, dec, focus)\r\n{\r\n    //note that arrays are called by reference\r\n    let pivot = a[r];\r\n    let i = l - 1;\r\n    for (let j = l; j < r; j++)\r\n    {\r\n        anim.push([\"crimson\", j, r]);\r\n        if(focus) anim.push([\"lime\", i+1, i+1]);\r\n        let changed = 0;\r\n        if(dec)\r\n        {\r\n            if (a[j] > pivot)\r\n            {\r\n                changed = 1;\r\n                i++; anim.push([\"swap\", i, j]);\r\n                let x = a[i]; a[i] = a[j]; a[j] = x;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (a[j] < pivot)\r\n            {\r\n                changed = 1;\r\n                i++; anim.push([\"swap\", i, j]);\r\n                let x = a[i]; a[i] = a[j]; a[j] = x;\r\n            }\r\n        }\r\n        anim.push([\"lightskyblue\", j, r]);\r\n        if(focus) anim.push([\"lightskyblue\", i+1-changed, i+1-changed]);\r\n    }\r\n    anim.push([\"crimson\", i+1, r]);\r\n    anim.push([\"swap\", i+1, r]);\r\n    anim.push([\"lightskyblue\", i+1, r]);\r\n    let x = a[i+1]; a[i+1] = a[r]; a[r] = x;\r\n    return i + 1;\r\n}\r\n\r\n//bubble sort function\r\nexport function bubbleSort(a, anim, dec) {\r\n    //moves the largest element to the top during each sweep of the algorithm\r\n    for(var i = a.length-1; i > 0; i--)\r\n    {\r\n        for(var j = 0; j < i; j++)\r\n        {\r\n            //updates colour of this element and the one next to it\r\n            anim.push([\"crimson\", j, j+1]);\r\n            if(dec)\r\n            {\r\n                if(a[j] < a[j+1])\r\n                {\r\n                    //swap two values\r\n                    let x = a[j]; a[j] = a[j+1]; a[j+1] = x;\r\n                    anim.push([\"swap\", j, j+1]);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if(a[j] > a[j+1])\r\n                {\r\n                    //swap two values\r\n                    let x = a[j]; a[j] = a[j+1]; a[j+1] = x;\r\n                    anim.push([\"swap\", j, j+1]);\r\n                }\r\n            }\r\n            //reset the colours\r\n            anim.push([\"lightskyblue\", j, j+1]);\r\n        }\r\n    }\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport {Button, Modal, Form, OverlayTrigger, Tooltip} from \"react-bootstrap\";\r\nimport * as algos from \"./Algorithms\";\r\n\r\nclass Sort extends Component {\r\n\r\n    //constants and other stuff\r\n    timeouts = [];\r\n    decreasing = false;\r\n    showMergeFocus = false;\r\n    showQuickFocus = false;\r\n    endMargin = 40;\r\n    maxArraySize = 200;\r\n\r\n\r\n    state = { array: [], anim: [], btnActive: true, showModal: true, arraySize: this.maxArraySize, animDelay: 3, \r\n        arrayWidth: (window.innerWidth-this.endMargin*2)/(this.maxArraySize*2), \r\n        arrayMargin: (window.innerWidth-this.endMargin*2)/(this.maxArraySize*4) }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n        window.addEventListener('resize', this.updWidth);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        for(let i = 0; i < this.timeouts.length; i++)\r\n        {\r\n            clearTimeout(this.timeouts[i]);\r\n        }\r\n        window.removeEventListener('resize', this.updWidth);\r\n    }\r\n\r\n    updWidth = () => {\r\n        this.setState({ arrayWidth: (window.innerWidth-this.endMargin*2)/(this.maxArraySize*2), arrayMargin: (window.innerWidth-this.endMargin*2)/(this.maxArraySize*4) });\r\n    }\r\n\r\n    hideModal = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    //initialize array to random values\r\n    resetArray = () => {\r\n        const array = [];\r\n        for(let i = 0; i < this.state.arraySize; i++)\r\n        {\r\n            array.push(randomInt(100, 500));\r\n        }\r\n        this.setState({array: array});\r\n    }\r\n\r\n    playAnimations = () => \r\n    {\r\n        //these algorithms do the sorting on a copy of the official array, then push all of the modification data to the animation array\r\n        //the animation array is read here and changes are made to the original array\r\n        for(let i = 0; i < this.state.anim.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const colours = [\"lightskyblue\", \"crimson\", \"lime\"];\r\n            const [cmd, a, b] = this.state.anim[i];\r\n            if (colours.includes(cmd))\r\n            {\r\n                this.timeouts.push(setTimeout(() => {\r\n                    if(a !== -1) arrayBars[a].style.backgroundColor = cmd;\r\n                    if(b !== -1) arrayBars[b].style.backgroundColor = cmd;\r\n                }, i*this.state.animDelay));\r\n            }\r\n            else\r\n            {\r\n                switch(cmd)\r\n                {\r\n                    case \"update\":\r\n                        this.timeouts.push(setTimeout(() => {\r\n                            this.state.array[a] = b;\r\n                            arrayBars[a].style.height = `${b/10}vh`;\r\n                        }, i*this.state.animDelay));\r\n                        break;\r\n                    case \"swap\":\r\n                        this.timeouts.push(setTimeout(() => {\r\n                            let x = this.state.array[a]; this.state.array[a] = this.state.array[b]; this.state.array[b] = x;\r\n                            arrayBars[a].style.height = `${this.state.array[a]/10}vh`;\r\n                            arrayBars[b].style.height = `${this.state.array[b]/10}vh`;\r\n                        }, i*this.state.animDelay));\r\n                        break;\r\n                    case \"focus\":\r\n                        this.timeouts.push(setTimeout(() => {\r\n                            for(let j = 0; j < arrayBars.length; j++)\r\n                            {\r\n                                if(a <= j && j <= b) arrayBars[j].style.opacity = `100%`;\r\n                                else arrayBars[j].style.opacity = `30%`;\r\n                            }\r\n                        }, i*this.state.animDelay));\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this.timeouts.push(this.timeout = setTimeout(() => {\r\n            this.setState({btnActive: true});\r\n        }, this.state.anim.length*this.state.animDelay));\r\n    }\r\n\r\n    bubbleSort = () => {\r\n        this.setState({anim: [], btnActive: false});\r\n        algos.bubbleSort(this.state.array.slice(), this.state.anim, this.decreasing);\r\n        this.playAnimations();\r\n    }\r\n\r\n    mergeSort = () => {\r\n        this.setState({anim: [], btnActive: false});\r\n        algos.mergeSort(this.state.array.slice(), this.state.anim, 0, this.state.array.length-1, this.decreasing, this.showMergeFocus);\r\n        this.playAnimations();\r\n    }\r\n\r\n    quickSort = () => {\r\n        this.setState({anim: [], btnActive: false});\r\n        algos.quickSort(this.state.array.slice(), this.state.anim, 0, this.state.array.length-1, this.decreasing, this.showQuickFocus);\r\n        this.playAnimations();\r\n    }\r\n\r\n    stopAlgorithm = () => {\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        for(let i = 0; i < arrayBars.length; i++) \r\n        {\r\n            arrayBars[i].style.backgroundColor = \"lightskyblue\"; \r\n            arrayBars[i].style.opacity = `100%`;\r\n        }\r\n        for(let i = 0; i < this.timeouts.length; i++)\r\n        {\r\n            clearTimeout(this.timeouts[i]);\r\n        }\r\n        this.setState({btnActive: true});\r\n    }\r\n\r\n    //event for changing the size of the array\r\n    changedSize = (event) => {\r\n        this.setState({arraySize: event.target.value});\r\n    }\r\n\r\n    changedDecreasing = (event) => {\r\n        this.decreasing = event.target.checked;\r\n    }\r\n    \r\n    changedShowMergeFocus = (event) => {\r\n        this.showMergeFocus = event.target.checked;\r\n    }\r\n\r\n    changedShowQuickFocus = (event) => {\r\n        this.showQuickFocus = event.target.checked;\r\n        console.log(this.showQuickFocus);\r\n    }\r\n\r\n    //event for changing the animation delay\r\n    changedDelay = (event) => {\r\n        this.setState({animDelay: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n        return (\r\n            <div>\r\n                <Modal onHide={this.hideModal} show={this.state.showModal}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered>\r\n                    <Modal.Body>\r\n                    <h4>Sorting Visualizer</h4>\r\n                    <p>This app visualizes sorting algorithms on an array. Here are the algorithms it supports:</p>\r\n                    <hr/>\r\n                    <h5>Bubble Sort</h5>\r\n                    <p>A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements \r\n                        and swaps them if they are in the wrong order.</p>\r\n                    <hr/>\r\n                    <h5>Merge Sort</h5>\r\n                    <p>A divide and conquer sorting algorithm that uses O(n) merging of two sorted segments.</p>\r\n                    <hr/>\r\n                    <h5>Quick Sort</h5>\r\n                    <p>A divide and conquer sorting algorithm that uses a pivot to sort subarrays recursively.</p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button onClick={this.hideModal}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <div className=\"array-bar-fake\" style={{ height: `${500/10}vh` }}></div>\r\n                {array.map((value, idx) => (\r\n                    <div className=\"array-bar\" key={idx} style={{ height: `${value/10}vh`, width: this.state.arrayWidth, \r\n                    margin: `0px ${this.state.arrayMargin}px` }}></div>\r\n                ))}\r\n                <div className=\"array-bar-fake\" style={{ height: `${500/10}vh` }}></div>\r\n                <hr/>\r\n                <div style={{display: \"inline-block\"}}>\r\n                    <Button variant=\"success\" disabled={!this.state.btnActive} onClick={this.resetArray}>New Array</Button>\r\n                    <Button variant=\"primary\" disabled={!this.state.btnActive} onClick={this.bubbleSort}>Bubble Sort</Button>\r\n                    <Button variant=\"info\" disabled={!this.state.btnActive} onClick={this.mergeSort}>Merge Sort</Button>\r\n                    <Button variant=\"dark\" disabled={!this.state.btnActive} onClick={this.quickSort}>Quick Sort</Button>\r\n                    <Button variant=\"danger\" disabled={this.state.btnActive} onClick={this.stopAlgorithm}>Stop Algorithm</Button>\r\n\r\n                    <Form>\r\n                        <Form.Check\r\n                            inline\r\n                            type=\"checkbox\"\r\n                            style={{ marginRight: 30, marginBottom: 5 }}\r\n                            label=\"Sort in decreasing order\"\r\n                            onChange={this.changedDecreasing}\r\n                            disabled={!this.state.btnActive}\r\n                        />\r\n                        <OverlayTrigger\r\n                            placement=\"right\"\r\n                            delay={{ show: 250, hide: 400 }}\r\n                            overlay={<Tooltip>\r\n                                Highlights the segment of the array processed by each recursive call of merge sort\r\n                                as well as the current element being adjusted.\r\n                            </Tooltip>}\r\n                        >\r\n                            <Form.Check\r\n                                inline\r\n                                type=\"checkbox\"\r\n                                style={{ marginRight: 30, marginBottom: 5 }}\r\n                                label=\"Show focus of merge sort\"\r\n                                onChange={this.changedShowMergeFocus}\r\n                                disabled={!this.state.btnActive}\r\n                            />\r\n                        </OverlayTrigger>\r\n\r\n                        <OverlayTrigger\r\n                            placement=\"right\"\r\n                            delay={{ show: 250, hide: 400 }}\r\n                            overlay={<Tooltip>\r\n                                Highlights the segment of the array processed by each recursive call of quick sort\r\n                                as well as the current element being adjusted.\r\n                            </Tooltip>}\r\n                        >\r\n                            <Form.Check\r\n                                inline\r\n                                type=\"checkbox\"\r\n                                style={{ marginRight: 30, marginBottom: 5 }}\r\n                                label=\"Show focus of quick sort\"\r\n                                onChange={this.changedShowQuickFocus}\r\n                                disabled={!this.state.btnActive}\r\n                            />\r\n                        </OverlayTrigger>\r\n\r\n                        <Form.Group controlId=\"formBasicRange\">\r\n                            <Form.Label>Array Size: {this.state.arraySize}</Form.Label>\r\n                            <Form.Control disabled={!this.state.btnActive} type=\"range\" defaultValue={this.state.arraySize}\r\n                                          min=\"10\" max={this.maxArraySize} tooltip=\"auto\" onChange = {(event) => this.changedSize(event)}/>\r\n                            <Form.Label>Animation Delay: {this.state.animDelay} ms</Form.Label>\r\n                            <Form.Control disabled={!this.state.btnActive} type=\"range\" defaultValue={this.state.animDelay}\r\n                                          min=\"1\" max=\"200\" tooltip=\"auto\" onChange = {(event) => this.changedDelay(event)}/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//random int in the range [min, max]\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max-min+1) + min);\r\n}\r\nexport default Sort;","export default __webpack_public_path__ + \"static/media/icon.df8e9b2c.png\";","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport icon from \"../assets/icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navigation = props => {\r\n    //component is passed down thru props and navigation will now apply the navbar on top of the component\r\n    const { Component, activeKey } = props;\r\n\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand as={Link} to=\"/\">\r\n                    <img src={icon} alt=\"Icon\" className=\"icon\" />\r\n                </Navbar.Brand>\r\n                <Nav activeKey={activeKey} className=\"mr-auto\">\r\n                    <Nav.Link eventKey=\"/\" as={Link} to=\"/\">Home</Nav.Link>\r\n                    <Nav.Link eventKey=\"/sort\" as={Link} to=\"/sort\">Sort</Nav.Link>\r\n                </Nav>\r\n            </Navbar>\r\n            <Component />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Home from \"./components/Home\";\r\nimport Sort from \"./components/Sort\";\r\nimport Navigation from \"./components/Navigation\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport \"./index.css\";\r\n\r\n//render everything in App as html code in the body of index.html\r\nReactDOM.render(\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n        <Route exact path=\"/\" render={() => <Navigation Component={Home} activeKey=\"/\" />} />\r\n        <Route path=\"/sort\" render={() => <Navigation Component={Sort} activeKey=\"/sort\" />} />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}